{
	"info": {
		"_postman_id": "94f99787-2c02-4bfc-a11e-0576ed6f39fa",
		"name": "VS13 ServeRest Aula2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30033207",
		"_collection_link": "https://crimson-zodiac-622144.postman.co/workspace/My-Workspace~a20bf18a-36ad-4439-8d92-7c6561b09140/collection/30033207-94f99787-2c02-4bfc-a11e-0576ed6f39fa?action=share&source=collection_link&creator=30033207"
	},
	"item": [
		{
			"name": "PRODUTOS",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "Cadastrar Produtos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code: 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"base_url\") + \"/produtos/\" + respData._id,\r",
											"    method: \"DELETE\",\r",
											"    header: {\r",
											"        \"authorization\": \"Bearer \" + pm.environment.get(\"token_admin\")\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar se o id nao e nulo\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData._id).to.not.be.null;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{token_admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"{{nome}}\",\r\n    \"preco\": {{preco}},\r\n    \"descricao\": \"{{descricao}}\", \r\n    \"quantidade\": {{quantidade}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/produtos",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar Produtos com nome já em uso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"quantidade\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'http://localhost:3000/produtos',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    var responseData = response.json();\r",
											"\r",
											"    if (responseData && responseData.produtos.length >= 0) {\r",
											"        var nomeEmUso = responseData.produtos[0].nome;  \r",
											"        pm.environment.set(\"nome\", nomeEmUso);\r",
											"        pm.environment.set(\"nome\", pm.variables.replaceIn(nomeEmUso))\r",
											"\r",
											"    } else {\r",
											"        console.error('Nenhum produto encontrado');\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.environment.set(\"preco\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"\r",
											"pm.environment.set(\"descricao\", pm.variables.replaceIn\r",
											"('{{$randomProductAdjective}} made of {{$randomProductMaterial}} by {{$randomCompanyName}}'))\r",
											"\r",
											"pm.environment.set(\"quantidade\", pm.variables.replaceIn('{{$randomInt}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Cadastrar produto com nome já em uso - Status code : 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastrar produto com nome já em uso - Permissao concedida\", function () {\r",
											"    pm.response.to.have.jsonBody(\"message\", \"Já existe produto com esse nome\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{token_admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"{{nome}}\",\r\n    \"preco\": {{preco}},\r\n    \"descricao\": \"{{descricao}}\", \r\n    \"quantidade\": {{quantidade}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/produtos",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar Produtos com token expirado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.environment.set(\"nome\", pm.variables.replaceIn('{{$randomProduct}}'))\r",
											"\r",
											"pm.environment.set(\"preco\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"\r",
											"pm.environment.set(\"descricao\", pm.variables.replaceIn\r",
											"('{{$randomProductAdjective}} made of {{$randomProductMaterial}} by {{$randomCompanyName}}'))\r",
											"\r",
											"pm.environment.set(\"quantidade\", pm.variables.replaceIn('{{$randomInt}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CT24 Cadastrar produtos com token expirado - Permissao concedida\", function () {\r",
											"    pm.response.to.have.jsonBody(\"message\", \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											"\r",
											"pm.test(\"CT24 Cadastrar produto com token expirado - Status code : 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_expirado}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"{{nome}}\",\r\n    \"preco\": {{preco}},\r\n    \"descricao\": \"{{descricao}}\", \r\n    \"quantidade\": {{quantidade}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/produtos",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "Atualizar Produtos com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const cadastrarProduto = {\r",
											"    url: pm.environment.get(\"base_url\") + \"/produtos\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"authorization\": \"Bearer \" + pm.environment.get(\"token_admin\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify(pm.environment.get(\"novoProduto\"))\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(cadastrarProduto, function(err, res) {\r",
											"    pm.expect(err).is.null;\r",
											"    pm.environment.set(\"id\", res.json()._id);\r",
											"})\r",
											"\r",
											"pm.environment.set(\"nome\", pm.variables.replaceIn('{{$randomProductMaterial}}' + '{{$randomInt}}'));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica atualização de produto com sucesso\", function () {\r",
											"    pm.expect(respData.message).to.eql(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"const deletarProduto = {\r",
											"    url: pm.environment.get(\"base_url\") + \"/produtos/\" + pm.environment.get(\"id\"),\r",
											"    method: \"DELETE\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"authorization\": \"Bearer \" + pm.environment.get(\"token_admin\")\r",
											"    } \r",
											"};\r",
											"\r",
											"pm.sendRequest(deletarProduto, function(err, res) {\r",
											"    pm.expect(err).is.null;\r",
											"    \r",
											"    pm.test(\"O codigo de resposta do DELETE deve ser: 200\", function () {\r",
											"        pm.expect(res.code).to.eql(200);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"{{nome}}\",\r\n    \"preco\": {{preco}},\r\n    \"descricao\": \"{{descricao}}\", \r\n    \"quantidade\": {{quantidade}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/produtos/{{id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"produtos",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Produtos com token expirado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const cadastrarProduto = {\r",
											"    url: pm.environment.get(\"base_url\") + \"/produtos\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"authorization\": \"Bearer \" + pm.environment.get(\"token_expirado\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify(pm.environment.get(\"novoProduto\"))\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(cadastrarProduto, function(err, res) {\r",
											"    pm.expect(err).is.null;\r",
											"    pm.environment.set(\"id\", res.json()._id);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"nome\", pm.variables.replaceIn('{{$randomProductMaterial}}'));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verifica Status code 401 do PUT\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se o token está expirado\", function () {\r",
											"    pm.expect(respData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"base_url\") + \"/produtos/\" + pm.environment.get(\"id\"),\r",
											"    method: \"DELETE\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"authorization\": \"Bearer \" + pm.environment.get(\"token_admin\")\r",
											"    } \r",
											"});\r",
											"\r",
											"pm.test(\"O codigo de resposta do DELETE deve ser: 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar resposta do DELETE com token expirado\", function () {\r",
											"    pm.expect(respData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_expirado}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"{{nome}}\",\r\n    \"preco\": {{preco}},\r\n    \"descricao\": \"{{descricao}}\", \r\n    \"quantidade\": {{quantidade}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/produtos/{{id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"produtos",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Produtos com nome ja em uso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const cadastrarProduto = {\r",
											"    url: pm.environment.get(\"base_url\") + \"/produtos\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"authorization\": \"Bearer \" + pm.environment.get(\"token_admin\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify(pm.environment.get(\"novoProduto\"))\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(cadastrarProduto, function(err, res) {\r",
											"    pm.expect(err).is.null;\r",
											"    pm.environment.set(\"id_aux\", res.json()._id);\r",
											"})\r",
											"\r",
											"const novoProdutoAtualizado = pm.environment.get(\"novoProduto\");\r",
											"novoProdutoAtualizado.nome = \"nome editado1\"; \r",
											"\r",
											"const cadastrarProdutoAtualizado = {\r",
											"    url: pm.environment.get(\"base_url\") + \"/produtos\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"authorization\": \"Bearer \" + pm.environment.get(\"token_admin\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify(novoProdutoAtualizado)\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(cadastrarProdutoAtualizado, function(err, res) {\r",
											"    pm.expect(err).is.null;\r",
											"    pm.environment.set(\"id\", res.json()._id);\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const respData = pm.response.json();\r",
											"\r",
											"    pm.test(\"Edicao com nome repetido - Status code: 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Edicao com nome repetido - Mensagem de falha na alteracao\", function () {\r",
											"        var responseData = pm.response.json();\r",
											"        pm.expect(responseData.message).to.equal(\"Já existe produto com esse nome\");\r",
											"    });\r",
											"\r",
											"    const deletarProduto = {\r",
											"        url: pm.environment.get(\"base_url\") + \"/produtos/\" + pm.environment.get(\"id\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"content-type\": \"application/json\",\r",
											"            \"accept\": \"application/json\",\r",
											"            \"authorization\": \"Bearer \" + pm.environment.get(\"token_admin\")\r",
											"        } \r",
											"    };\r",
											"\r",
											"    pm.sendRequest(deletarProduto, function(err, res) {\r",
											"        pm.expect(err).is.null;\r",
											"        \r",
											"        pm.test(\"O codigo de resposta do DELETE deve ser: 200\", function () {\r",
											"            pm.expect(res.code).to.eql(200);\r",
											"        });\r",
											"    });\r",
											"\r",
											"    const deletarProduto2 = {\r",
											"        url: pm.environment.get(\"base_url\") + \"/produtos/\" + pm.environment.get(\"id_aux\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"content-type\": \"application/json\",\r",
											"            \"accept\": \"application/json\",\r",
											"            \"authorization\": \"Bearer \" + pm.environment.get(\"token_admin\")\r",
											"        } \r",
											"    };\r",
											"\r",
											"    pm.sendRequest(deletarProduto2, function(err, res) {\r",
											"        pm.expect(err).is.null;\r",
											"        \r",
											"        pm.test(\"O codigo de resposta do DELETE deve ser: 200\", function () {\r",
											"            pm.expect(res.code).to.eql(200);\r",
											"        });\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"{{nome}}\",\r\n    \"preco\": {{preco}},\r\n    \"descricao\": \"{{descricao}}\", \r\n    \"quantidade\": {{quantidade}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/produtos/{{id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"produtos",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Produtos com id inválido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"    pm.environment.set(\"nome\", \"cria prod\" + \"{{$randomInt}}\");\r",
											"    pm.environment.set(\"preco\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"    pm.environment.set(\"descricao\", pm.variables.replaceIn('{{$randomProductAdjective}} made of {{$randomProductMaterial}} by {{$randomCompanyName}}'));\r",
											"    pm.environment.set(\"quantidade\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const responseData = pm.response.json();\r",
											"    console.log(pm.response)\r",
											"    pm.test(\"CT32 - Edicao com id invalido - Status code: 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    pm.test(\"CT32 - Edicao com id invalido - Mensagem de criacao de produto\", function () {\r",
											"        pm.expect(responseData.message).to.equal(\"Cadastro realizado com sucesso\");\r",
											"    });\r",
											"\r",
											"    console.log(responseData);\r",
											"\r",
											"    const deletarProduto = {\r",
											"        url: pm.environment.get(\"base_url\") + \"/produtos/\" + responseData._id,\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"content-type\": \"application/json\",\r",
											"            \"accept\": \"application/json\",\r",
											"            \"authorization\": \"Bearer \" + pm.environment.get(\"token_admin\")\r",
											"        } \r",
											"    };\r",
											"\r",
											"    pm.sendRequest(deletarProduto, function(err, res) {\r",
											"        pm.expect(err).is.null;\r",
											"        \r",
											"        pm.test(\"O codigo de resposta do DELETE deve ser: 200\", function () {\r",
											"            pm.expect(res.code).to.eql(200);\r",
											"        });\r",
											"        pm.test(\"A Mensagem do DELETE esta correta\", function () {\r",
											"            pm.expect(res.json().message).to.eql(\"Registro excluído com sucesso\");\r",
											"        });\r",
											"    });\r",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"{{nome}}\",\r\n    \"preco\": {{preco}},\r\n    \"descricao\": \"{{descricao}}\", \r\n    \"quantidade\": {{quantidade}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/produtos/{{id_invalido}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"produtos",
										"{{id_invalido}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Excluir Produtos com id invalido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"CT21 Excluir produto com ID invalido - Status code: 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});\r",
											"pm.test(\"CT21 - Excluir produto com ID invalido - Nenhum produto excluido\", function () {\r",
											"    pm.response.to.have.jsonBody({\r",
											"        message: \"Nenhum registro excluído\"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/produtos/{{id_invalido}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"produtos",
										"{{id_invalido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir Produtos com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const cadastrarProduto = {\r",
											"    url: pm.environment.get(\"base_url\") + \"/produtos\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"authorization\": \"Bearer \" + pm.environment.get(\"token_admin\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify(pm.environment.get(\"novoProduto\"))\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(cadastrarProduto, function(err, res) {\r",
											"    pm.expect(err).is.null;\r",
											"    pm.environment.set(\"id\", res.json()._id);\r",
											"    pm.test(\"O codigo de resposta do POST deve ser: 201\", function () {\r",
											"        pm.expect(res.code).to.eql(201);\r",
											"    });\r",
											"    pm.test(\"A Mensagem do POST esta correta\", function () {\r",
											"        pm.expect(res.json().message).to.eql(\"Cadastro realizado com sucesso\");\r",
											"    });\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"O code do DELETE deve ser: 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificando mensagem do DELETE\", function () {\r",
											"    pm.expect(respData.message).to.satisfy(function (message) {\r",
											"        return message.includes(\"Registro excluído com sucesso\") || message.includes(\"Nenhum registro excluído\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{token_admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/produtos/{{id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"produtos",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir Produtos com token expirado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.environment.set(\"nome\", pm.variables.replaceIn('{{$randomProduct}}' + '{{$randomInt}}'));\r",
											"pm.environment.set(\"preco\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"pm.environment.set\r",
											"(\"descricao\", pm.variables.replaceIn('{{$randomProductAdjective}} made of {{$randomProductMaterial}} by {{$randomCompanyName}}'));\r",
											"pm.environment.set(\"quantidade\", pm.variables.replaceIn('{{$randomInt}}'));\r",
											"\r",
											"var infoBody = {\r",
											"    \"nome\": pm.environment.get(\"nome\"),\r",
											"    \"preco\": pm.environment.get(\"preco\"),\r",
											"    \"descricao\": pm.environment.get(\"descricao\"),\r",
											"    \"quantidade\": pm.environment.get(\"quantidade\")\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'http://localhost:3000/produtos',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('token_admin')\r",
											"    },\r",
											"        body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(infoBody)\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        return;\r",
											"    }\r",
											"    const resposta = response.json(); \r",
											"    pm.environment.set(\"id\", resposta._id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    pm.test(\"CT19 Exclusao de produto com token expirado - Status code: 401\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"\r",
											"    pm.test(\"CT19 Exclusao de produto com token expirado- Mensagem de nao autorizacao\", function () {\r",
											"        pm.expect(pm.response.json().message).to.equal(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_expirado}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/produtos/{{id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"produtos",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "Buscar Produto por ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const cadastrarProduto = {\r",
											"    url: pm.environment.get(\"base_url\") + \"/produtos\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"authorization\": \"Bearer \" + pm.environment.get(\"token_admin\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify(pm.environment.get(\"novoProduto\"))\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(cadastrarProduto, function(err, res) {\r",
											"    pm.expect(err).is.null;\r",
											"    pm.environment.set(\"id\", res.json()._id);\r",
											"    pm.test(\"O codigo de resposta do POST deve ser: 201\", function () {\r",
											"        pm.expect(res.code).to.eql(201);\r",
											"    });\r",
											"    pm.test(\"A Mensagem do POST esta correta\", function () {\r",
											"        pm.expect(res.json().message).to.eql(\"Cadastro realizado com sucesso\");\r",
											"    });\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const respData = pm.response.json();\r",
											"console.log(pm.response)\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    const deletarProduto = {\r",
											"        url: pm.environment.get(\"base_url\") + \"/produtos/\" + respData._id,\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"content-type\": \"application/json\",\r",
											"            \"accept\": \"application/json\",\r",
											"            \"authorization\": \"Bearer \" + pm.environment.get(\"token_admin\")\r",
											"        } \r",
											"    };\r",
											"\r",
											"    pm.sendRequest(deletarProduto, function(err, res) {\r",
											"        pm.expect(err).is.null;\r",
											"        \r",
											"        pm.test(\"O codigo de resposta do DELETE deve ser: 200\", function () {\r",
											"            pm.expect(res.code).to.eql(200);\r",
											"        });\r",
											"        pm.test(\"A Mensagem do DELETE esta correta\", function () {\r",
											"            pm.expect(res.json().message).to.eql(\"Registro excluído com sucesso\");\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/produtos/{{id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"produtos",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Produto com filtro de nome",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const cadastrarProduto = {\r",
											"    url: pm.environment.get(\"base_url\") + \"/produtos\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"authorization\": \"Bearer \" + pm.environment.get(\"token_admin\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify(pm.environment.get(\"novoProduto\"))\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(cadastrarProduto, function(err, res) {\r",
											"    pm.expect(err).is.null;\r",
											"    pm.environment.set(\"novoProduto_nome\", pm.environment.get(\"novoProduto\").nome);\r",
											"    pm.environment.set(\"id\", res.json()._id);\r",
											"    pm.test(\"O codigo de resposta do POST deve ser: 201\", function () {\r",
											"        pm.expect(res.code).to.eql(201);\r",
											"    });\r",
											"    pm.test(\"A Mensagem do POST esta correta\", function () {\r",
											"        pm.expect(res.json().message).to.eql(\"Cadastro realizado com sucesso\");\r",
											"    });\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"    const respData = pm.response.json();\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    const deletarProduto = {\r",
											"        url: pm.environment.get(\"base_url\") + \"/produtos/\" + respData._id,\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"content-type\": \"application/json\",\r",
											"            \"accept\": \"application/json\",\r",
											"            \"authorization\": \"Bearer \" + pm.environment.get(\"token_admin\")\r",
											"        } \r",
											"    };\r",
											"\r",
											"    pm.sendRequest(deletarProduto, function(err, res) {\r",
											"        pm.expect(err).is.null;\r",
											"        \r",
											"        pm.test(\"O codigo de resposta do DELETE deve ser: 200\", function () {\r",
											"            pm.expect(res.code).to.eql(200);\r",
											"        });\r",
											"        pm.test(\"A Mensagem do DELETE esta correta\", function () {\r",
											"            pm.expect(res.json().message).to.eql(\"Registro excluído com sucesso\");\r",
											"        });\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/produtos/{{id}}?nome={{novoProduto_nome}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"produtos",
										"{{id}}"
									],
									"query": [
										{
											"key": "nome",
											"value": "{{novoProduto_nome}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Produto por ID invalido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/produtos/{{id_invalido}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"produtos",
										"{{id_invalido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Produtos",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/produtos/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"produtos",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token_admin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							"pm.environment.set(\"nome\", pm.variables.replaceIn('{{$randomProduct}}' + \" \" + '{{$randomInt}}'))",
							"",
							"pm.environment.set(\"preco\", pm.variables.replaceIn('{{$randomInt}}'))",
							"",
							"pm.environment.set(\"descricao\", pm.variables.replaceIn",
							"('{{$randomProductAdjective}} made of {{$randomProductMaterial}} by {{$randomCompanyName}}'))",
							"",
							"pm.environment.set(\"quantidade\", pm.variables.replaceIn('{{$randomInt}}'))",
							"",
							"const novoProduto = {",
							"    \"nome\" : pm.environment.get(\"nome\"),",
							"    \"preco\": pm.environment.get(\"preco\"),",
							"    \"descricao\": pm.environment.get(\"descricao\"),",
							"    \"quantidade\": pm.environment.get(\"quantidade\")",
							"}",
							"pm.environment.set(\"novoProduto\", novoProduto);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Login admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Login successful\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"    pm.expect(pm.response.json().message).to.equal(\"Login realizado com sucesso\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token_admin}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token_admin}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var email = pm.environment.get(\"email_admin\");",
					"var password = pm.environment.get(\"password_admin\");",
					"",
					"pm.sendRequest({",
					"    url: \"http://localhost:3000/login\",",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/json'",
					"    },",
					"    body: {",
					"        mode: 'raw',",
					"        raw: JSON.stringify({",
					"            email: email,",
					"            password: password",
					"        })",
					"    }",
					"}, function (err, response) {",
					"    if (err) {",
					"        console.error(err);",
					"    } else {",
					"        var jsonData = response.json();",
					"        var authorization = jsonData.authorization.replace('Bearer ', '');",
					"        pm.environment.set(\"token_admin\", authorization);",
					"    }",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}